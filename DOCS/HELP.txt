.......................................................................................................................
DEVELOP:

Установить IDE: Visual Studio Code(https://code.visualstudio.com/), зарегистрироваться и подключить все расширения
Установить Python (https://www.python.org/) и все настройки при установке в директорию C:\Projects\Python\Python- "версия_пайтона"
Установить Pip installer(https://pypi.org/), если не был установлен при предыдущих установках.
Установить Nodejs (https://nodejs.org/)

Установить PostgreSQL(https://www.postgresql.org/) и все настройки и пароль при установке в директорию C:\Project\Envire\PostgreSQL- "версия_postgre"
.......................................................................................................................

.......................................................................................................................
PREVIEW:

'www.pythonanywhere.com' - сайт
Зайти в панель управления
'Recent Files' - Добавлять / изменять / заменять файлы и настройки вручную через 
'Recent Consoles' - после изменения в файлах, сделать терминала, от главного пути папки проекта, 'python manage.py makemigrations'->'python manage.py migrate'
'All Web Apps' - зайти в настройки веб-приложения, перезагрузить приложение и дату его активации
.......................................................................................................................

.......................................................................................................................
linux:

Установить последнюю LTS версию ubunta и её обновления
Установить Chromium и активировать аккаунт гугл
Установить тимвивер / anydesk / radmin / etc
'wget https://download.teamviewer.com/download/linux/teamviewer_amd64.deb' - скачивание тимвивера
'sudo apt install ./teamviewer_amd64.deb' - установка тимвивера

'htop' - команда для проверки нагрузки на линукс убунта



'sudo apt-get update -y' - Получить обновления
'sudo apt upgrade -y' - Установить обновления
'sudo apt install git -y' - Установить гит
'git clone https://github.com/bogdandrienko/web-app.git' - Клонировать репозиторий с проектом, ввести имя пользователя "bogdandrienko" и пароль "3*2*4*o*d*n"
'sudo apt install python3-pip -y' - Установить пакетный менеджер pip
'sudo apt-get install python3-venv -y' - Установить дополнение для создания виртуального окружения
'python3 -m venv lin_env' - Создать виртуальное окружение
'source lin_env/bin/activate' - Активировать виртуальное окружение
'pip install --upgrade pip' - Обновить pip
'pip install -r requirements_lin.txt' - Установить все компоненты и дополнения из файла "requirements_lin.txt"
'pip install django Pillow' - Ручная установка компонентов самых свежих.
'python manage.py runserver 192.168.1.62:8000' - запуск сервера на локальной сети "192.168.1.62:8000"

Дополнения:
asgiref==3.3.1
Django==3.1.5
djangorestframework==3.12.2
Pillow==8.1.0
pkg-resources==0.0.0
pytz==2020.5
sqlparse==0.4.1

Не нужно:
/.DOCS
/.node_modules
/.win_env
/..babelrc
/..jshintrc
/.package.json
/.package-lock.json
/.requirements_win.txt
/.webpack.config.js
.......................................................................................................................

.......................................................................................................................
Django: 

'pip install env' - Установить Расширение pip 'env'(виртуальное окружение)
'mkdir project_name' - создать папку проекта
'chdir project_name' - изменить путь на папку проекта
'python -m venv win_env' - Создать виртуальное окружение, в текущей директории
'call .\win_env\Scripts\activate.bat' - Активировать виртуальное окружение проекта
'pip install --upgrade pip' - Обновить pip
'pip install django' - Установить Django

pip install django-crispy-forms
pip install django-grappelli
pip install djangorestframework
pip install requests


'pip install -r requirements.txt' - Установить все компоненты и дополнения из файла "requirements_win.txt"
'django-admin startproject project_name .' - Создать новый проект Django, в текущей директории
'django-admin startapp app_name' - Создать приложение Django
'python manage.py makemigrations' - Создать миграции проекта
'python manage.py migrate' - Применить миграции проекта
'python manage.py createsuperuser' - Создать суперпользователя
'python manage.py runserver' - Запустить сервер


Дополнения:
asgiref==3.3.1
cffi==1.14.4
click==7.1.2
cryptography==3.3.1
Django==3.1.4
django-rest-framework==0.1.0
django-rest-knox==4.1.0
djangorestframework==3.12.2
env==0.1.0
gunicorn==20.0.4
h11==0.12.0
Pillow==8.0.1
psycopg2==2.8.6
pycparser==2.20
pytz==2020.4
six==1.15.0
sqlparse==0.4.1
uvicorn==0.13.3
.......................................................................................................................

.......................................................................................................................
React:

'call .\env_name\Scripts\activate.bat' - Активировать виртуальное окружение проекта
'npm init -y' - Создать node.js приложение

'npm install webpack webpack-cli @babel/core @babel/preset-env @babel/preset-react babel-loader babel-plugin-transform-class-properties --save-dev' - Установить дополнения, как зависимость "разработки"
'npm install react react-dom react-redux redux redux-devtools-extension redux-thunk prop-types axios --save' - Установить дополнения, как зависимость "локальную"
.......................................................................................................................

..................................
Heroku

heroku config:set DISABLE_COLLECTSTATIC=1 --app kostanay-minerals
...........................

.......................................................................................................................
СКРИПТЫ:

'windows_ENVIRE' - активация и вызов окна консоли из под виртуального окружения env, из под него надо запускать django и устанавливать пакеты pip / npm
'windows_RUN' - запуск сервера django на localhost, заранее активируется виртуальное окружение 
'windows_MIGRATES' - создание и применение миграций всего проекта
'windows_CREATE' - создание чистого проекта

КОМАНДЫ:

'django' ->	'django-admin startproject _project_name_' - создание проекта, с названием _project_name_
                'django-admin startapp _app_name_' - создание приложения, с названием _app_name_

		'python manage.py createsuperuser' - создать суперпользователя
		'python manage.py makemigrations' - создание миграций всего проекта
                'python manage.py makemigrations _app_name_' - создание миграции приложения _app_name_
                'python manage.py migrate' - применение миграций всего проекта
               	'python manage.py migrate _app_name_' - применение миграции приложения _app_name_
		'python manage.py runserver' - запуск сервера
		'python manage.py collectstatic' - собрать все статические файлы в директорию

		'uvicorn django_project.asgi:application --port 8000 --no-access-log'


'pip' ->	'python -m venv env_name' - создание виртуального окружения, с названием env_name
            	'pip install --upgrade pip' - обновление pip
		'pip install package_name' - установка пакета(ов)
            	'pip install -r requirements.txt' - установка пакетов из файла requirements.txt
            	'pip freeze > requirements.txt' - сохранение установленных пакетов в файл requirements.txt

		'pip help' - помощь по доступным командам
		'pip -V' - узнать версию установленного pip
		'pip uninstall package_name' - удаление пакета(ов)
		'pip list' - список установленных пакетов
		'pip show package_name' - показывает информацию об установленном пакете
		'pip search' - поиск пакетов по имени
		'pip --proxy user:passwd@proxy.server:port' - использование с прокси
		'pip install -U' - обновление пакета(ов)
		'pip install --force-reinstall' - при обновлении, переустановить пакет, даже если он последней версии
                

'npm' ->	'npm init -y' - инициализация приложения node.js и создание файлов настроек приложения
                'npm install' - установка пакетов из package.json
                'npm install _package_name_' - установка пакетов
                'npm run dev' - запуск dev скрипта npm
                'npm run build' - запуск build скрипта npm

		'node -h' - список всех команд доступных в Node.js
		'node -v' - узнать версию установленного Node.js
.......................................................................................................................
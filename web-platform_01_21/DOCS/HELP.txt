.......................................................................................................................
DEVELOP:

Установить IDE: Visual Studio Code(https://code.visualstudio.com/), зарегистрироваться и подключить все расширения
Установить Python (https://www.python.org/) и все настройки при установке в директорию C:\Projects\Python\Python- "версия_пайтона"
Установить Pip installer(https://pypi.org/), если не был установлен при предыдущих установках.
Установить Nodejs (https://nodejs.org/)

Установить PostgreSQL(https://www.postgresql.org/) и все настройки и пароль при установке в директорию C:\Project\Envire\PostgreSQL- "версия_postgre"
.......................................................................................................................

.......................................................................................................................
PREVIEW:

'www.pythonanywhere.com' - сайт
Зайти в панель управления
'Recent Files' - Добавлять / изменять / заменять файлы и настройки вручную через 
'Recent Consoles' - после изменения в файлах, сделать терминала, от главного пути папки проекта, 'python manage.py makemigrations'->'python manage.py migrate'
'All Web Apps' - зайти в настройки веб-приложения, перезагрузить приложение и дату его активации
.......................................................................................................................

.......................................................................................................................
linux:

Установить последнюю LTS версию ubunta
Накатить все обновления
Установить тимвивер / radmin / etc
Установить Chromium и активировать аккаунт гугл
Установить гит и клонировать репозиторий с проектом
Создать / обновить / активировать виртуальное окружение, установить все нужные пакеты в него

'python manage.py runserver 192.168.1.62:8000' - запуск сервера на локальной сети

'htop' - команда для проверки нагрузки на линукс убунта
.......................................................................................................................

.......................................................................................................................
Django: 

'pip install env' - Установить Расширение pip 'env'(виртуальное окружение)
'mkdir project_name' - создать папку проекта
'chdir project_name' - изменить путь на папку проекта
'python -m venv env_name' - Создать виртуальное окружение, в текущей директории
'call .\env_name\Scripts\activate.bat' - Активировать виртуальное окружение проекта
'pip install --upgrade pip' - Обновить pip
'pip install django' - Установить Django
'django-admin startproject project_name .' - Создать новый проект Django, в текущей директории
'django-admin startapp app_name' - Создать приложение Django
'python manage.py makemigrations' - Создать миграции проекта
'python manage.py migrate' - Применить миграции проекта
'python manage.py createsuperuser' - Создать суперпользователя
'python manage.py runserver' - Запустить сервер

'pip install djangorestframework psycopg2 Pillow django-rest-knox' - Установить дополнения
.......................................................................................................................

.......................................................................................................................
React:

'call .\env_name\Scripts\activate.bat' - Активировать виртуальное окружение проекта
'npm init -y' - Создать node.js приложение

'npm install webpack webpack-cli @babel/core @babel/preset-env @babel/preset-react babel-loader babel-plugin-transform-class-properties --save-dev' - Установить дополнения, как зависимость "разработки"
'npm install react react-dom react-redux redux redux-devtools-extension redux-thunk prop-types axios --save' - Установить дополнения, как зависимость "локальную"
.......................................................................................................................

.......................................................................................................................
СКРИПТЫ:

'windows_ENVIRE' - активация и вызов окна консоли из под виртуального окружения env, из под него надо запускать django и устанавливать пакеты pip / npm
'windows_RUN' - запуск сервера django на localhost, заранее активируется виртуальное окружение 
'windows_MIGRATES' - создание и применение миграций всего проекта
'windows_CREATE' - создание чистого проекта

КОМАНДЫ:

'django' ->	'django-admin startproject _project_name_' - создание проекта, с названием _project_name_
                'django-admin startapp _app_name_' - создание приложения, с названием _app_name_

		'python manage.py createsuperuser' - создать суперпользователя
		'python manage.py makemigrations' - создание миграций всего проекта
                'python manage.py makemigrations _app_name_' - создание миграции приложения _app_name_
                'python manage.py migrate' - применение миграций всего проекта
               	'python manage.py migrate _app_name_' - применение миграции приложения _app_name_
		'python manage.py runserver' - запуск сервера
		'python manage.py collectstatic' - собрать все статические файлы в директорию

		'uvicorn django_project.asgi:application --port 8000 --no-access-log'


'pip' ->	'python -m venv env_name' - создание виртуального окружения, с названием env_name
            'pip install --upgrade pip' - обновление pip
			'pip install package_name' - установка пакета(ов)
            'pip install -r requirements.txt' - установка пакетов из файла requirements.txt
            'pip freeze > requirements.txt' - сохранение установленных пакетов в файл requirements.txt

		'pip help' - помощь по доступным командам
		'pip -V' - узнать версию установленного pip
		'pip uninstall package_name' - удаление пакета(ов)
		'pip list' - список установленных пакетов
		'pip show package_name' - показывает информацию об установленном пакете
		'pip search' - поиск пакетов по имени
		'pip --proxy user:passwd@proxy.server:port' - использование с прокси
		'pip install -U' - обновление пакета(ов)
		'pip install --force-reinstall' - при обновлении, переустановить пакет, даже если он последней версии
                

'npm' ->	'npm init -y' - инициализация приложения node.js и создание файлов настроек приложения
                'npm install' - установка пакетов из package.json
                'npm install _package_name_' - установка пакетов
                'npm run dev' - запуск dev скрипта npm
                'npm run build' - запуск build скрипта npm

		'node -h' - список всех команд доступных в Node.js
		'node -v' - узнать версию установленного Node.js
.......................................................................................................................




.......................................................................................................................
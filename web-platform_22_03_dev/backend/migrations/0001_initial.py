# Generated by Django 4.0.2 on 2022-03-10 15:13

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ActionModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_char_field', models.CharField(blank=True, db_column='name_char_field_db_column', db_index=True, db_tablespace='name_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted underline">кириллица, любой регистр, можно с пробелами, например: "Модератор отдела ОУПиБП"</small><hr><br>', max_length=256, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(256)], verbose_name='Имя действия для отображения')),
                ('access_slug_field', models.SlugField(blank=True, db_column='access_slug_field_db_column', db_tablespace='access_slug_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted underline">латинница, нижний регистр, без пробелов, например: "moderator_oupibp"</small><hr><br>', max_length=256, null=True, unique=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(256)], verbose_name='Имя действия для валидации и ссылок')),
            ],
            options={
                'verbose_name': 'Admin Действие',
                'verbose_name_plural': 'Admin Действия',
                'db_table': 'action_model_table',
                'ordering': ('name_char_field', 'access_slug_field'),
            },
        ),
        migrations.CreateModel(
            name='LoggingModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username_slug_field', models.SlugField(blank=True, db_column='username_slug_field_db_column', db_tablespace='username_slug_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">Тут отображается идентификатор пользователя, например: </small><hr><br>', max_length=12, null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(12)], verbose_name='Имя пользователя')),
                ('ip_genericipaddress_field', models.GenericIPAddressField(blank=True, db_column='ip_genericipaddress_field_field_db_column', db_index=True, db_tablespace='ip_genericipaddress_field_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">Строка содержащая ip-адрес, example: "127.0.0.1"</small><hr><br>', null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(12)], verbose_name='Ip адрес клиента')),
                ('request_path_slug_field', models.SlugField(blank=True, db_column='request_path_slug_field_field_db_column', db_tablespace='request_path_slug_field_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">Строка содержащая путь обращения, example: "https://.../home/"</small><hr><br>', max_length=128, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(128)], verbose_name='Действие пользователя')),
                ('request_method_slug_field', models.SlugField(blank=True, db_column='request_method_slug_field_field_db_column', db_tablespace='request_method_slug_field_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">GET: просмотр страницы, POST: отправка данных из формы</small><hr><br>', max_length=4, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(4)], verbose_name='Метод запроса')),
                ('error_text_field', models.TextField(blank=True, db_column='error_text_field_db_column', db_index=True, db_tablespace='error_text_field_db_tablespace', default='error: ', error_messages=False, help_text='<small class="text-muted">Много текста, example: "текст, текст..."</small><hr><br>', max_length=512, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(512)], verbose_name='Текст ошибки и/или исключения')),
                ('datetime_field', models.DateTimeField(blank=True, db_column='datetime_field_db_column', db_index=True, db_tablespace='datetime_field_db_tablespace', default=django.utils.timezone.now, error_messages=False, help_text='<small class="text-muted">Дата и время, example: "31.12.2021Т23:59:59"</small><hr><br>', null=True, verbose_name='Дата и время записи')),
            ],
            options={
                'verbose_name': 'Лог',
                'verbose_name_plural': 'Admin Логи',
                'db_table': 'logging_admin_model_table',
                'ordering': ('-datetime_field',),
            },
        ),
        migrations.CreateModel(
            name='ResumeModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qualification_field', models.CharField(blank=True, db_column='qualification_field_db_column', db_index=True, db_tablespace='qualification_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">qualification_field</small><hr><br>', max_length=256, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(256)], verbose_name='qualification_field')),
                ('last_name_field', models.CharField(blank=True, db_column='last_name_field_db_column', db_index=True, db_tablespace='last_name_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">last_name_field</small><hr><br>', max_length=256, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(256)], verbose_name='last_name_field')),
                ('first_name_field', models.CharField(blank=True, db_column='first_name_field_db_column', db_index=True, db_tablespace='first_name_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">first_name_field</small><hr><br>', max_length=256, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(256)], verbose_name='first_name_field')),
                ('patronymic_field', models.CharField(blank=True, db_column='patronymic_field_db_column', db_index=True, db_tablespace='patronymic_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">patronymic_field</small><hr><br>', max_length=256, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(256)], verbose_name='patronymic_field')),
                ('image_field', models.ImageField(blank=True, db_column='image_field_db_column', db_index=True, db_tablespace='image_field_db_tablespace', default='uploads/vacancy/default_vacancy.jpg', error_messages=False, help_text='<small class="text-muted">>image_field</small><hr><br>', max_length=200, null=True, upload_to='uploads/vacancy/image/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'png'])], verbose_name='image_field')),
                ('datetime_birth_field', models.DateTimeField(blank=True, db_column='datetime_birth_field_db_column', db_index=True, db_tablespace='datetime_birth_field_db_tablespace', default=django.utils.timezone.now, error_messages=False, help_text='<small class="text-muted">datetime_birth_field</small><hr><br>', null=True, verbose_name='datetime_birth_field')),
                ('datetime_create_field', models.DateTimeField(blank=True, db_column='datetime_create_field_db_column', db_index=True, db_tablespace='datetime_create_field_db_tablespace', default=django.utils.timezone.now, error_messages=False, help_text='<small class="text-muted">datetime_create_field</small><hr><br>', null=True, verbose_name='datetime_create_field')),
                ('education_field', models.CharField(blank=True, db_column='education_field_db_column', db_index=True, db_tablespace='education_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">education_field</small><hr><br>', max_length=128, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(128)], verbose_name='education_field')),
                ('experience_field', models.CharField(blank=True, db_column='experience_field_db_column', db_index=True, db_tablespace='experience_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">experience_field</small><hr><br>', max_length=128, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(128)], verbose_name='experience_field')),
                ('sex_field', models.CharField(blank=True, db_column='sex_field_db_column', db_index=True, db_tablespace='sex_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">sex_field</small><hr><br>', max_length=32, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(32)], verbose_name='sex_field')),
                ('contact_data_field', models.TextField(blank=True, db_column='contact_data_field_db_column', db_index=True, db_tablespace='contact_data_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">contact_data_field</small><hr><br>', max_length=250, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(250)], verbose_name='contact_data_field')),
            ],
            options={
                'verbose_name': 'Резюме',
                'verbose_name_plural': 'Резюме',
                'db_table': 'resume_model_table',
                'ordering': ('-datetime_create_field',),
            },
        ),
        migrations.CreateModel(
            name='UserModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password_slug_field', models.SlugField(blank=True, db_column='password_slug_field_db_column', db_tablespace='password_slug_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">password_slug_field</small><hr><br>', max_length=128, null=True, validators=[django.core.validators.MinLengthValidator(8), django.core.validators.MaxLengthValidator(128)], verbose_name='Пароль от аккаунта пользователя')),
                ('activity_boolean_field', models.BooleanField(blank=True, db_column='activity_boolean_field_db_column', db_index=True, db_tablespace='activity_boolean_field_db_tablespace', default=True, error_messages=False, help_text='<small class="text-muted">activity_boolean_field</small><hr><br>', verbose_name='Активность аккаунта пользователя')),
                ('email_field', models.EmailField(blank=True, db_column='email_field_db_column', db_index=True, db_tablespace='email_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">Строка содержащая почту, example: "bogdandrienko@gmail.com"</small><hr><br>', max_length=254, null=True, validators=[django.core.validators.MinLengthValidator(1), django.core.validators.MaxLengthValidator(254)], verbose_name='email_field')),
                ('secret_question_char_field', models.CharField(blank=True, db_column='secret_question_char_field_db_column', db_index=True, db_tablespace='secret_question_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">secret_question_char_field</small><hr><br>', max_length=128, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(128)], verbose_name='Секретный вопрос')),
                ('secret_answer_char_field', models.CharField(blank=True, db_column='secret_answer_char_field_db_column', db_index=True, db_tablespace='secret_answer_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">secret_answer_char_field</small><hr><br>', max_length=128, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(128)], verbose_name='Секретный ответ')),
                ('temp_password_boolean_field', models.BooleanField(blank=True, db_column='temp_password_boolean_field_db_column', db_index=True, db_tablespace='temp_password_boolean_field_db_tablespace', default=True, error_messages=False, help_text='<small class="text-muted">temp_password_boolean_field</small><hr><br>', verbose_name='Временный пароль пользователя')),
                ('last_name_char_field', models.CharField(blank=True, db_column='last_name_char_field_db_column', db_index=True, db_tablespace='last_name_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">last_name_char_field</small><hr><br>', max_length=128, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(128)], verbose_name='Фамилия')),
                ('first_name_char_field', models.CharField(blank=True, db_column='first_char_field_db_column', db_index=True, db_tablespace='first_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">first_char_field</small><hr><br>', max_length=128, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(128)], verbose_name='Имя')),
                ('patronymic_char_field', models.CharField(blank=True, db_column='patronymic_char_field_db_column', db_index=True, db_tablespace='patronymic_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">patronymic_char_field</small><hr><br>', max_length=128, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(128)], verbose_name='Отчество')),
                ('personnel_number_slug_field', models.SlugField(blank=True, db_column='personnel_number_slug_field_db_column', db_tablespace='personnel_number_slug_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">personnel_number_slug_field</small><hr><br>', max_length=32, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(32)], verbose_name='Табельный номер')),
                ('subdivision_char_field', models.CharField(blank=True, db_column='subdivision_char_field_db_column', db_index=True, db_tablespace='subdivision_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">subdivision_char_field</small><hr><br>', max_length=128, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(128)], verbose_name='Подразделение')),
                ('workshop_service_char_field', models.CharField(blank=True, db_column='workshop_service_char_field_db_column', db_index=True, db_tablespace='workshop_service_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">workshop_service_char_field</small><hr><br>', max_length=128, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(64)], verbose_name='Цех/Служба')),
                ('department_site_char_field', models.CharField(blank=True, db_column='department_site_char_field_db_column', db_index=True, db_tablespace='department_site_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">department_site_char_field</small><hr><br>', max_length=128, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(64)], verbose_name='Отдел/Участок')),
                ('position_char_field', models.CharField(blank=True, db_column='position_char_field_db_column', db_index=True, db_tablespace='position_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">position_char_field</small><hr><br>', max_length=128, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(64)], verbose_name='Должность')),
                ('category_char_field', models.CharField(blank=True, db_column='category_char_field_db_column', db_index=True, db_tablespace='category_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">category_char_field</small><hr><br>', max_length=128, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(64)], verbose_name='Категория')),
                ('education_text_field', models.TextField(blank=True, db_column='education_text_field_db_column', db_index=True, db_tablespace='education_text_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">education_text_field</small><hr><br>', max_length=1024, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(512)], verbose_name='Образование')),
                ('achievements_text_field', models.TextField(blank=True, db_column='achievements_text_field_db_column', db_index=True, db_tablespace='achievements_text_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">achievements_text_field</small><hr><br>', max_length=1024, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(512)], verbose_name='Достижения')),
                ('biography_text_field', models.TextField(blank=True, db_column='biography_text_field_db_column', db_index=True, db_tablespace='biography_text_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">biography_text_field</small><hr><br>', max_length=1024, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(512)], verbose_name='Биография')),
                ('hobbies_text_field', models.TextField(blank=True, db_column='hobbies_text_field_db_column', db_index=True, db_tablespace='hobbies_text_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">hobbies_text_field</small><hr><br>', max_length=1024, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(512)], verbose_name='Увлечения')),
                ('image_field', models.ImageField(blank=True, db_column='image_field_db_column', db_index=True, db_tablespace='image_field_db_tablespace', default='uploads/account/default_avatar.jpg', error_messages=False, help_text='<small class="text-muted">image_field_db_column</small><hr><br>', max_length=200, null=True, upload_to='uploads/admin/account/avatar', validators=[django.core.validators.FileExtensionValidator(['jpg', 'png'])], verbose_name='Изображение профиля пользователя')),
                ('user_foreign_key_field', models.ForeignKey(blank=True, db_column='user_foreign_key_field_db_column', db_tablespace='user_foreign_key_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">Связь, с каким-либо пользователем, example: "to=User.objects.get(username="Bogdan")"</small><hr><br>', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь:')),
            ],
            options={
                'verbose_name': 'Пользователь расширенный',
                'verbose_name_plural': 'Admin Пользователи расширение',
                'db_table': 'user_extend_model_table',
                'ordering': ('last_name_char_field', 'first_name_char_field', 'patronymic_char_field'),
            },
        ),
        migrations.CreateModel(
            name='VacancyModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qualification_field', models.CharField(blank=True, db_column='qualification_field_db_column', db_index=True, db_tablespace='qualification_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">qualification_field</small><hr><br>', max_length=256, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(256)], verbose_name='qualification_field')),
                ('image_field', models.ImageField(blank=True, db_column='image_field_db_column', db_index=True, db_tablespace='image_field_db_tablespace', default='uploads/vacancy/default_vacancy.jpg', error_messages=False, help_text='<small class="text-muted">>image_field</small><hr><br>', max_length=200, null=True, upload_to='uploads/vacancy/image/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'png'])], verbose_name='image_field')),
                ('datetime_field', models.DateTimeField(blank=True, db_column='datetime_field_db_column', db_index=True, db_tablespace='datetime_field_db_tablespace', default=django.utils.timezone.now, error_messages=False, help_text='<small class="text-muted">datetime_field</small><hr><br>', null=True, verbose_name='datetime_field')),
                ('sphere_field', models.CharField(blank=True, db_column='sphere_field_db_column', db_index=True, db_tablespace='sphere_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">sphere_field</small><hr><br>', max_length=128, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(128)], verbose_name='sphere_field')),
                ('education_field', models.CharField(blank=True, db_column='education_field_db_column', db_index=True, db_tablespace='education_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">education_field</small><hr><br>', max_length=128, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(128)], verbose_name='education_field')),
                ('rank_field', models.CharField(blank=True, db_column='rank_field_db_column', db_index=True, db_tablespace='rank_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">rank_field</small><hr><br>', max_length=32, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(32)], verbose_name='rank_field')),
                ('experience_field', models.CharField(blank=True, db_column='experience_field_db_column', db_index=True, db_tablespace='experience_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">experience_field</small><hr><br>', max_length=128, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(128)], verbose_name='experience_field')),
                ('schedule_field', models.CharField(blank=True, db_column='schedule_field_db_column', db_index=True, db_tablespace='schedule_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">schedule_field</small><hr><br>', max_length=128, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(128)], verbose_name='schedule_field')),
                ('description_field', models.TextField(blank=True, db_column='description_field_db_column', db_index=True, db_tablespace='description_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">description_field</small><hr><br>', max_length=512, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(512)], verbose_name='description_field')),
                ('author_field', models.ForeignKey(blank=True, db_column='author_field_db_column', db_tablespace='author_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">author_field</small><hr><br>', null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.usermodel', verbose_name='author_field')),
            ],
            options={
                'verbose_name': 'Вакансия',
                'verbose_name_plural': 'Вакансии',
                'db_table': 'vacancy_model_table',
                'ordering': ('-datetime_field',),
            },
        ),
        migrations.CreateModel(
            name='RationalModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_char_field', models.CharField(blank=True, db_column='number_char_field_db_column', db_index=True, db_tablespace='number_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">number_char_field</small><hr><br>', max_length=512, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(512)], verbose_name='number_char_field')),
                ('subdivision_char_field', models.CharField(blank=True, db_column='subdivision_char_field_db_column', db_index=True, db_tablespace='subdivision_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">subdivision_char_field</small><hr><br>', max_length=512, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(512)], verbose_name='Наименование структурного подразделения')),
                ('sphere_char_field', models.CharField(blank=True, db_column='sphere_char_field_db_column', db_index=True, db_tablespace='sphere_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">sphere_char_field</small><hr><br>', max_length=512, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(512)], verbose_name='Сфера рац. предложения')),
                ('category_char_field', models.CharField(blank=True, db_column='category_char_field_db_column', db_index=True, db_tablespace='category_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">category_char_field</small><hr><br>', max_length=512, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(512)], verbose_name='Категория')),
                ('avatar_image_field', models.ImageField(blank=True, db_column='avatar_image_field_db_column', db_index=True, db_tablespace='avatar_image_field_db_tablespace', default='uploads/rational/default_rational.jpg', error_messages=False, help_text='<small class="text-muted">>avatar_image_field</small><hr><br>', max_length=200, null=True, upload_to='uploads/rational/avatar/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'png'])], verbose_name='Аватарка-заставка для идеи')),
                ('name_char_field', models.CharField(blank=True, db_column='name_char_field_db_column', db_index=True, db_tablespace='name_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">name_char_field</small><hr><br>', max_length=250, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(250)], verbose_name='Название рац. предложения')),
                ('place_char_field', models.CharField(blank=True, db_column='place_char_field_db_column', db_index=True, db_tablespace='place_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">place_char_field</small><hr><br>', max_length=500, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(500)], verbose_name='Предполагаемое место внедрения')),
                ('description_text_field', models.TextField(blank=True, db_column='description_text_field_db_column', db_index=True, db_tablespace='description_text_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">description_text_field</small><hr><br>', max_length=5000, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(5000)], verbose_name='Полное описание')),
                ('additional_word_file_field', models.FileField(blank=True, db_column='additional_word_file_field_db_column', db_index=True, db_tablespace='additional_word_file_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">additional_word_file_field</small><hr><br>', max_length=200, null=True, upload_to='uploads/rational/files/', validators=[django.core.validators.FileExtensionValidator(['docx', 'doc'])], verbose_name='Word файл-приложение')),
                ('additional_pdf_file_field', models.FileField(blank=True, db_column='additional_pdf_file_field_db_column', db_index=True, db_tablespace='additional_pdf_file_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">additional_pdf_file_field</small><hr><br>', max_length=200, null=True, upload_to='uploads/rational/files/', validators=[django.core.validators.FileExtensionValidator(['pdf'])], verbose_name='Pdf файл-приложение')),
                ('additional_excel_file_field', models.FileField(blank=True, db_column='additional_excel_file_field_db_column', db_index=True, db_tablespace='additional_excel_file_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">additional_excel_file_field</small><hr><br>', max_length=200, null=True, upload_to='uploads/rational/files/', validators=[django.core.validators.FileExtensionValidator(['xlsx', 'xls'])], verbose_name='Excel файл-приложение')),
                ('user1_char_field', models.CharField(blank=True, db_column='user1_char_field_db_column', db_index=True, db_tablespace='user1_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">user1_char_field</small><hr><br>', max_length=512, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(512)], verbose_name='user1')),
                ('user2_char_field', models.CharField(blank=True, db_column='user2_char_field_db_column', db_index=True, db_tablespace='user2_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">user2_char_field</small><hr><br>', max_length=512, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(512)], verbose_name='user2')),
                ('user3_char_field', models.CharField(blank=True, db_column='user3_char_field_db_column', db_index=True, db_tablespace='user3_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">user3_char_field</small><hr><br>', max_length=512, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(512)], verbose_name='user3')),
                ('author_premoderate_char_field', models.CharField(blank=True, db_column='author_premoderate_char_field_db_column', db_index=True, db_tablespace='author_premoderate_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">author_premoderate_char_field</small><hr><br>', max_length=256, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(256)], verbose_name='author_premoderate_char_field')),
                ('conclusion_premoderate_char_field', models.CharField(blank=True, db_column='conclusion_premoderate_char_field_db_column', db_index=True, db_tablespace='conclusion_premoderate_char_field_db_tablespace', default='Приостановлено', error_messages=False, help_text='<small class="text-muted">conclusion_premoderate_char_field</small><hr><br>', max_length=64, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(64)], verbose_name='conclusion_premoderate_char_field')),
                ('comment_premoderate_char_field', models.CharField(blank=True, db_column='comment_premoderate_char_field_db_column', db_index=True, db_tablespace='comment_premoderate_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">comment_premoderate_char_field</small><hr><br>', max_length=256, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(256)], verbose_name='comment_premoderate_char_field')),
                ('author_postmoderate_char_field', models.CharField(blank=True, db_column='author_postmoderate_char_field_db_column', db_index=True, db_tablespace='author_postmoderate_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">author_postmoderate_char_field</small><hr><br>', max_length=256, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(256)], verbose_name='author_postmoderate_char_field')),
                ('conclusion_postmoderate_char_field', models.CharField(blank=True, db_column='conclusion_postmoderate_char_field_db_column', db_index=True, db_tablespace='conclusion_postmoderate_char_field_db_tablespace', default='Приостановлено', error_messages=False, help_text='<small class="text-muted">conclusion_postmoderate_char_field</small><hr><br>', max_length=64, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(64)], verbose_name='conclusion_postmoderate_char_field')),
                ('comment_postmoderate_char_field', models.CharField(blank=True, db_column='comment_postmoderate_char_field_db_column', db_index=True, db_tablespace='comment_postmoderate_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">comment_postmoderate_char_field</small><hr><br>', max_length=256, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(256)], verbose_name='comment_postmoderate_char_field')),
                ('visibility_boolean_field', models.BooleanField(blank=True, db_column='visibility_boolean_field_db_column', db_index=True, db_tablespace='visibility_boolean_field_db_tablespace', default=False, error_messages=False, help_text='<small class="text-muted">visibility_boolean_field</small><hr><br>', verbose_name='Видимость идеи в общем списке')),
                ('created_datetime_field', models.DateTimeField(blank=True, db_column='created_datetime_field_db_column', db_index=True, db_tablespace='created_datetime_field_db_tablespace', default=django.utils.timezone.now, error_messages=False, help_text='<small class="text-muted">created_datetime_field</small><hr><br>', null=True, verbose_name='Дата создания')),
                ('register_datetime_field', models.DateTimeField(blank=True, db_column='register_datetime_field_db_column', db_index=True, db_tablespace='register_datetime_field_db_tablespace', default=django.utils.timezone.now, error_messages=False, help_text='<small class="text-muted">register_datetime_field</small><hr><br>', null=True, verbose_name='Дата регистрации')),
                ('author_foreign_key_field', models.ForeignKey(blank=True, db_column='author_foreign_key_field_db_column', db_tablespace='author_foreign_key_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">author_foreign_key_field</small><hr><br>', null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.usermodel', verbose_name='Автор рац. предложения')),
            ],
            options={
                'verbose_name': 'Рац. предложение',
                'verbose_name_plural': 'Rational Рац. предложения',
                'db_table': 'rational_model_table',
                'ordering': ('-created_datetime_field',),
            },
        ),
        migrations.CreateModel(
            name='GroupModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_char_field', models.CharField(blank=True, db_column='name_char_field_db_column', db_index=True, db_tablespace='name_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted underline">кириллица, любой регистр, можно с пробелами, например: "Модератор отдела ОУПиБП"</small><hr><br>', max_length=128, null=True, unique=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(128)], verbose_name='Имя группы для отображения')),
                ('name_slug_field', models.SlugField(blank=True, db_column='name_slug_field_db_column', db_tablespace='name_slug_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted underline">латинница, нижний регистр, без пробелов, например: "moderator_oupibp"</small><hr><br>', max_length=128, null=True, unique=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(128)], verbose_name='Имя группы для валидации')),
                ('action_many_to_many_field', models.ManyToManyField(blank=True, db_column='path_many_to_many_field_db_column', db_index=True, db_tablespace='path_many_to_many_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted underline">Связь, с каким-либо пользователем, example: "to=User.objects.get(username="Bogdan")"</small><hr><br>', related_name='action_many_to_many_field', to='backend.ActionModel', verbose_name='Разрешённые действия группы')),
                ('group_foreign_key_field', models.ForeignKey(blank=True, db_column='group_foreign_key_field_db_column', db_tablespace='group_foreign_key_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">Связь, с какой-либо группой, example: "to=Group.objects.get(name="User")"</small><hr><br>', null=True, on_delete=django.db.models.deletion.SET_NULL, to='auth.group', verbose_name='Группа:')),
                ('user_many_to_many_field', models.ManyToManyField(blank=True, db_column='user_many_to_many_field_db_column', db_index=True, db_tablespace='user_many_to_many_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted underline">Связь, с каким-либо пользователем, example: "to=User.objects.get(username="Bogdan")"</small><hr><br>', related_name='user_many_to_many_field', to='backend.UserModel', verbose_name='Пользователи группы')),
            ],
            options={
                'verbose_name': 'Группа расширенная',
                'verbose_name_plural': 'Admin Группы расширение',
                'db_table': 'group_extend_model_table',
                'ordering': ('name_char_field', 'name_slug_field'),
            },
        ),
        migrations.CreateModel(
            name='ExamplesModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('positive_integer_field', models.PositiveIntegerField(auto_created=True, blank=True, db_column='positive_integer_field_db_column', db_index=True, db_tablespace='positive_integer_field_tablespace', default=0, help_text='<small class="text-muted">Положительное целочисленное значение от 0 до 2147483647, example: "0"</small><hr><br>', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2147483647)], verbose_name='positive_integer_field')),
                ('big_integer_field', models.BigIntegerField(auto_created=True, blank=True, db_column='big_integer_field_db_column', db_index=True, db_tablespace='big_integer_field_tablespace', default=0, help_text='<small class="text-muted">Большое целочисленное значение от -9223372036854775808 до 9223372036854775807, example: "0"</small><hr><br>', null=True, validators=[django.core.validators.MinValueValidator(-9223372036854775808), django.core.validators.MaxValueValidator(9223372036854775807)], verbose_name='big integer')),
                ('binary_field', models.BinaryField(blank=True, db_column='binary_field_db_column', db_index=True, db_tablespace='binary_field_db_tablespace', default=None, editable=True, error_messages=False, help_text='<small class="text-muted">Бинарные данные (сохранять без преписки b"), example: "OTcwODAxMzUxMTc5"</small><hr><br>', max_length=1024, null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, validators=[django.core.validators.MinLengthValidator(1), django.core.validators.MaxLengthValidator(1024)], verbose_name='binary_field')),
                ('boolean_field', models.BooleanField(blank=True, db_column='boolean_field_db_column', db_index=True, db_tablespace='boolean_field_db_tablespace', default=False, error_messages=False, help_text='<small class="text-muted">Значение правда или ложь, example: "True" / "False"</small><hr><br>', unique_for_date=False, unique_for_month=False, unique_for_year=False, verbose_name='boolean_field')),
                ('null_boolean_field', models.BooleanField(blank=True, db_column='null_boolean_field_db_column', db_index=True, db_tablespace='null_boolean_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">Значение правда, ложь или неизвестно, example: "True" / "False / Неизвестно"</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, verbose_name='null_boolean_field')),
                ('char_field', models.CharField(blank=True, db_column='char_field_db_column', db_index=True, db_tablespace='char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">Небольшая срока текста, example: "текст, текст"</small><hr><br>', max_length=64, null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(64)], verbose_name='char_field')),
                ('text_field', models.TextField(blank=True, db_column='text_field_db_column', db_index=True, db_tablespace='text_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">Много текста, example: "текст, текст..."</small><hr><br>', max_length=512, null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(512)], verbose_name='text_field')),
                ('slug_field', models.SlugField(blank=True, db_column='slug_field_db_column', db_tablespace='slug_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">Строка текста валидная для ссылок и системных вызовов, example: "success"</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(50)], verbose_name='slug_field')),
                ('email_field', models.EmailField(blank=True, db_column='email_field_db_column', db_index=True, db_tablespace='email_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">Строка содержащая почту, example: "bogdandrienko@gmail.com"</small><hr><br>', max_length=254, null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, validators=[django.core.validators.MinLengthValidator(1), django.core.validators.MaxLengthValidator(254)], verbose_name='email_field')),
                ('url_field', models.URLField(blank=True, db_column='url_field_db_column', db_index=True, db_tablespace='url_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">Строка содержащая url-адрес, example: "http://89.218.132.130:8000/"</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(200)], verbose_name='url_field')),
                ('genericipaddress_field', models.GenericIPAddressField(blank=True, db_column='genericipaddress_field_db_column', db_index=True, db_tablespace='genericipaddress_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">Строка содержащая ip-адрес, example: "127.0.0.1"</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(32)], verbose_name='genericipaddress_field')),
                ('integer_field', models.IntegerField(blank=True, db_column='integer_field_db_column', db_index=True, db_tablespace='integer_field_db_tablespace', default=0, error_messages=False, help_text='<small class="text-muted">Целочисленное значение от -2147483648 до 2147483647, example: "0"</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, validators=[django.core.validators.MinValueValidator(-2147483648), django.core.validators.MaxValueValidator(2147483647)], verbose_name='integer_field')),
                ('float_field', models.FloatField(blank=True, db_column='float_field_db_column', db_index=True, db_tablespace='float_field_db_tablespace', default=0.0, error_messages=False, help_text='<small class="text-muted">Число с плавающей запятой, example: "0.0"</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, validators=[django.core.validators.MinValueValidator(-1000), django.core.validators.MaxValueValidator(1000)], verbose_name='float_field')),
                ('decimal_field', models.DecimalField(blank=True, db_column='decimal_field_db_column', db_index=True, db_tablespace='decimal_field_db_tablespace', decimal_places=5, default=0.0, error_messages=False, help_text='<small class="text-muted">Нецелочисленное значение, example: "0.000"</small><hr><br>', max_digits=10, null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, validators=[django.core.validators.MinValueValidator(-1000), django.core.validators.MaxValueValidator(1000)], verbose_name='decimal_field')),
                ('datetime_field', models.DateTimeField(blank=True, db_column='datetime_field_db_column', db_index=True, db_tablespace='datetime_field_db_tablespace', default=django.utils.timezone.now, error_messages=False, help_text='<small class="text-muted">Дата и время, example: "31.12.2021Т23:59:59"</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, verbose_name='datetime_field')),
                ('date_field', models.DateField(blank=True, db_column='date_field_db_column', db_index=True, db_tablespace='date_field_db_tablespace', default=django.utils.timezone.now, error_messages=False, help_text='<small class="text-muted">Дата, example: "31.12.2021"</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, verbose_name='date_field')),
                ('time_field', models.TimeField(blank=True, db_column='time_field_db_column', db_index=True, db_tablespace='time_field_db_tablespace', default=django.utils.timezone.now, error_messages=False, help_text='<small class="text-muted">Время, example: "23:59:59"</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, verbose_name='time_field')),
                ('duration_field', models.DurationField(blank=True, db_column='duration_field_db_column', db_index=True, db_tablespace='duration_field_db_tablespace', default=datetime.timedelta(seconds=1200), error_messages=False, help_text='<small class="text-muted">Длительность во времени, example: "2:59:59"</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, verbose_name='duration_field')),
                ('file_field', models.FileField(blank=True, db_column='file_field_db_column', db_index=True, db_tablespace='file_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">Файл, с расширением указанным в валидаторе, example: "example.xlsx"</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, upload_to='uploads/example/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(['xlsx', 'xls'])], verbose_name='file_field')),
                ('image_field', models.ImageField(blank=True, db_column='image_field_db_column', db_index=True, db_tablespace='image_field_db_tablespace', default='uploads/example/example.jpg', error_messages=False, help_text='<small class="text-muted">>Файл, с расширением изображения, example: "example.jpg(/png/bpm...)"</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, upload_to='uploads/example/example.jpg', validators=[django.core.validators.FileExtensionValidator(['jpg', 'png'])], verbose_name='file_field')),
                ('foreign_key_field', models.ForeignKey(blank=True, db_column='foreign_key_field_db_column', db_tablespace='foreign_key_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">Связь, с каким-либо объектом, example: "to=User.objects.get(username="Bogdan")"</small><hr><br>', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, unique_for_date=False, unique_for_month=False, unique_for_year=False, verbose_name='foreign_key_field')),
                ('many_to_many_field', models.ManyToManyField(blank=True, db_column='many_to_many_field_db_column', db_index=True, db_tablespace='many_to_many_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">Связь, с каким-либо объектом, example: "to=User.objects.get(username="Bogdan")"</small><hr><br>', related_name='many_to_many_field', to=settings.AUTH_USER_MODEL, unique_for_date=False, unique_for_month=False, unique_for_year=False, verbose_name='many_to_many_field')),
                ('one_to_one_field', models.OneToOneField(blank=True, db_column='one_to_one_field_db_column', db_tablespace='one_to_one_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">Связь, с каким-либо объектом, example: "to=User.objects.get(username="Bogdan")"</small><hr><br>', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='one_to_one_field', to=settings.AUTH_USER_MODEL, unique_for_date=False, unique_for_month=False, unique_for_year=False, verbose_name='one_to_one_field')),
            ],
            options={
                'verbose_name': 'Шаблон',
                'verbose_name_plural': 'Admin Шаблоны',
                'db_table': 'example_admin_model_table',
                'ordering': ('-id',),
            },
        ),
    ]

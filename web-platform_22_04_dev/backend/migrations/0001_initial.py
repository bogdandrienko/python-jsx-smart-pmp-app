# Generated by Django 4.0 on 2022-04-15 07:47

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ActionModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_slug_field', models.SlugField(blank=True, db_column='action_slug_field_db_column', db_tablespace='action_slug_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted underline">slug_field[0, 300]</small><hr><br>', max_length=300, null=True, unique=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Действие')),
            ],
            options={
                'verbose_name': 'Действие',
                'verbose_name_plural': 'Admin 3, Действия',
                'db_table': 'action_model_table',
                'ordering': ('action_slug_field',),
            },
        ),
        migrations.CreateModel(
            name='GroupModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_slug_field', models.SlugField(blank=True, db_column='name_slug_field_db_column', db_tablespace='name_slug_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted underline">slug_field[0, 300]</small><hr><br>', max_length=300, null=True, unique=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Имя')),
                ('action_many_to_many_field', models.ManyToManyField(blank=True, db_column='action_many_to_many_field_db_column', db_index=True, db_tablespace='action_many_to_many_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted underline">ActionModel: many_to_many_field</small><hr><br>', related_name='group_action_many_to_many_field', to='backend.ActionModel', verbose_name='Действия')),
            ],
            options={
                'verbose_name': 'Группа расширенная',
                'verbose_name_plural': 'Admin 2, Группы расширение',
                'db_table': 'group_extend_model_table',
                'ordering': ('name_slug_field',),
            },
        ),
        migrations.CreateModel(
            name='IdeaModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subdivision_char_field', models.CharField(blank=True, db_column='subdivision_char_field_db_column', db_index=True, db_tablespace='subdivision_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Подразделение')),
                ('sphere_char_field', models.CharField(blank=True, db_column='sphere_char_field_db_column', db_index=True, db_tablespace='sphere_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Сфера')),
                ('category_char_field', models.CharField(blank=True, db_column='category_char_field_db_column', db_index=True, db_tablespace='category_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Категория')),
                ('image_field', models.ImageField(blank=True, db_column='image_field_db_column', db_index=True, db_tablespace='image_field_db_tablespace', default='uploads/rational/default_rational.jpg', error_messages=False, help_text='<small class="text-muted">>image_field[jpg, png]</small><hr><br>', max_length=200, null=True, upload_to='uploads/rational/avatar/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'png'])], verbose_name='Изображение')),
                ('name_char_field', models.CharField(blank=True, db_column='name_char_field_db_column', db_index=True, db_tablespace='name_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Название')),
                ('place_char_field', models.CharField(blank=True, db_column='place_char_field_db_column', db_index=True, db_tablespace='place_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Место')),
                ('description_text_field', models.TextField(blank=True, db_column='description_text_field_db_column', db_index=True, db_tablespace='description_text_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">text_field[0, 3000]</small><hr><br>', max_length=3000, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(3000)], verbose_name='Описание')),
                ('status_moderate_char_field', models.CharField(blank=True, db_column='status_moderate_char_field_db_column', db_index=True, db_tablespace='status_moderate_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Статус')),
                ('comment_moderate_char_field', models.CharField(blank=True, db_column='comment_moderate_char_field_db_column', db_index=True, db_tablespace='comment_moderate_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Комментарий модерации')),
                ('created_datetime_field', models.DateTimeField(blank=True, db_column='created_datetime_field_db_column', db_index=True, db_tablespace='created_datetime_field_db_tablespace', default=django.utils.timezone.now, error_messages=False, help_text='<small class="text-muted">datetime_field</small><hr><br>', null=True, verbose_name='Дата и время создания')),
                ('register_datetime_field', models.DateTimeField(blank=True, db_column='register_datetime_field_db_column', db_index=True, db_tablespace='register_datetime_field_db_tablespace', default=django.utils.timezone.now, error_messages=False, help_text='<small class="text-muted">datetime_field</small><hr><br>', null=True, verbose_name='Дата и время регистрации')),
            ],
            options={
                'verbose_name': 'Идея',
                'verbose_name_plural': 'Банк идей 1, Идеи',
                'db_table': 'idea_model_table',
                'ordering': ('-created_datetime_field',),
            },
        ),
        migrations.CreateModel(
            name='LoggingModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username_slug_field', models.SlugField(blank=True, db_column='username_slug_field_db_column', db_tablespace='username_slug_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">slug_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Имя пользователя')),
                ('ip_genericipaddress_field', models.GenericIPAddressField(blank=True, db_column='ip_genericipaddress_field_field_db_column', db_index=True, db_tablespace='ip_genericipaddress_field_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">genericipaddress_field</small><hr><br>', null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Ip адрес')),
                ('request_path_slug_field', models.SlugField(blank=True, db_column='request_path_slug_field_field_db_column', db_tablespace='request_path_slug_field_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">slug_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Путь')),
                ('request_method_slug_field', models.SlugField(blank=True, db_column='request_method_slug_field_field_db_column', db_tablespace='request_method_slug_field_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">slug_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Метод')),
                ('error_text_field', models.TextField(blank=True, db_column='error_text_field_db_column', db_index=True, db_tablespace='error_text_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">text_field[0, 3000]</small><hr><br>', max_length=3000, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(3000)], verbose_name='Текст ошибки/исключения')),
                ('created_datetime_field', models.DateTimeField(blank=True, db_column='created_datetime_field_db_column', db_index=True, db_tablespace='created_datetime_field_db_tablespace', default=django.utils.timezone.now, error_messages=False, help_text='<small class="text-muted">created_datetime_field</small><hr><br>', null=True, verbose_name='Дата и время создания')),
            ],
            options={
                'verbose_name': 'Лог',
                'verbose_name_plural': 'Admin 5, Логи',
                'db_table': 'logging_admin_model_table',
                'ordering': ('-created_datetime_field',),
            },
        ),
        migrations.CreateModel(
            name='SettingsModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_char_field', models.CharField(blank=True, choices=[('logging_action', 'Логирование действий'), ('print_action', 'Вывод в консоль действий'), ('logging_error', 'Логирование ошибок'), ('print_error', 'Вывод в консоль ошибок'), ('logging_response', 'Логирование ответов'), ('print_response', 'Вывод в консоль ответов'), ('scheduler_personal', 'Планировщик обновления персонала из 1С'), ('scheduler_superuser', 'Планировщик создания стандартных суперпользователей'), ('scheduler_group', 'Планировщик создания стандартных групп')], db_column='type_char_field_db_column', db_index=True, db_tablespace='type_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, unique=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Тип')),
                ('char_field', models.CharField(blank=True, db_column='char_field_db_column', db_index=True, db_tablespace='char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='char')),
                ('slug_field', models.SlugField(blank=True, db_column='slug_field_db_column', db_tablespace='slug_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">slug_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='slug')),
                ('text_field', models.TextField(blank=True, db_column='text_field_db_column', db_index=True, db_tablespace='text_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">text_field[0, 3000]</small><hr><br>', max_length=3000, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(3000)], verbose_name='text')),
                ('integer_field', models.IntegerField(blank=True, db_column='integer_field_db_column', db_index=True, db_tablespace='integer_field_db_tablespace', default=0, error_messages=False, help_text='<small class="text-muted">integer_field</small><hr><br>', null=True, validators=[django.core.validators.MinValueValidator(-9999), django.core.validators.MaxValueValidator(9999)], verbose_name='integer')),
                ('float_field', models.FloatField(blank=True, db_column='float_field_db_column', db_index=True, db_tablespace='float_field_db_tablespace', default=0.0, error_messages=False, help_text='<small class="text-muted">float_field</small><hr><br>', null=True, validators=[django.core.validators.MinValueValidator(-9999), django.core.validators.MaxValueValidator(9999)], verbose_name='float')),
                ('boolean_field', models.BooleanField(blank=True, db_column='boolean_field_db_column', db_index=True, db_tablespace='boolean_field_db_tablespace', default=True, error_messages=False, help_text='<small class="text-muted">boolean_field</small><hr><br>', verbose_name='boolean')),
                ('created_datetime_field', models.DateTimeField(blank=True, db_column='created_datetime_field_db_column', db_index=True, db_tablespace='created_datetime_field_db_tablespace', default=django.utils.timezone.now, error_messages=False, help_text='<small class="text-muted">created_datetime_field</small><hr><br>', null=True, verbose_name='Дата и время создания')),
            ],
            options={
                'verbose_name': 'Настройка',
                'verbose_name_plural': 'Admin 4, Настройки',
                'db_table': 'settings_admin_model_table',
                'ordering': ('type_char_field',),
            },
        ),
        migrations.CreateModel(
            name='UserModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password_char_field', models.CharField(blank=True, db_column='password_char_field_db_column', db_index=True, db_tablespace='password_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Пароль')),
                ('activity_boolean_field', models.BooleanField(blank=True, db_column='activity_boolean_field_db_column', db_index=True, db_tablespace='activity_boolean_field_db_tablespace', default=True, error_messages=False, help_text='<small class="text-muted">boolean_field</small><hr><br>', verbose_name='Активность')),
                ('email_field', models.EmailField(blank=True, db_column='email_field_db_column', db_index=True, db_tablespace='email_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">email_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Почта')),
                ('secret_question_char_field', models.CharField(blank=True, db_column='secret_question_char_field_db_column', db_index=True, db_tablespace='secret_question_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Секретный вопрос')),
                ('secret_answer_char_field', models.CharField(blank=True, db_column='secret_answer_char_field_db_column', db_index=True, db_tablespace='secret_answer_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Секретный ответ')),
                ('temp_password_boolean_field', models.BooleanField(blank=True, db_column='temp_password_boolean_field_db_column', db_index=True, db_tablespace='temp_password_boolean_field_db_tablespace', default=True, error_messages=False, help_text='<small class="text-muted">boolean_field</small><hr><br>', verbose_name='Пароль не изменён')),
                ('last_name_char_field', models.CharField(blank=True, db_column='last_name_char_field_db_column', db_index=True, db_tablespace='last_name_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Фамилия')),
                ('first_name_char_field', models.CharField(blank=True, db_column='first_char_field_db_column', db_index=True, db_tablespace='first_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Имя')),
                ('patronymic_char_field', models.CharField(blank=True, db_column='patronymic_char_field_db_column', db_index=True, db_tablespace='patronymic_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Отчество')),
                ('personnel_number_slug_field', models.SlugField(blank=True, db_column='personnel_number_slug_field_db_column', db_tablespace='personnel_number_slug_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">slug_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Табельный номер')),
                ('subdivision_char_field', models.CharField(blank=True, db_column='subdivision_char_field_db_column', db_index=True, db_tablespace='subdivision_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Подразделение')),
                ('workshop_service_char_field', models.CharField(blank=True, db_column='workshop_service_char_field_db_column', db_index=True, db_tablespace='workshop_service_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Цех/Служба')),
                ('department_site_char_field', models.CharField(blank=True, db_column='department_site_char_field_db_column', db_index=True, db_tablespace='department_site_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Отдел/Участок')),
                ('position_char_field', models.CharField(blank=True, db_column='position_char_field_db_column', db_index=True, db_tablespace='position_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Должность')),
                ('category_char_field', models.CharField(blank=True, db_column='category_char_field_db_column', db_index=True, db_tablespace='category_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Категория')),
                ('education_text_field', models.TextField(blank=True, db_column='education_text_field_db_column', db_index=True, db_tablespace='education_text_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">text_field[0, 3000]</small><hr><br>', max_length=3000, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(3000)], verbose_name='Образование')),
                ('achievements_text_field', models.TextField(blank=True, db_column='achievements_text_field_db_column', db_index=True, db_tablespace='achievements_text_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">text_field[0, 3000]</small><hr><br>', max_length=3000, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(3000)], verbose_name='Достижения')),
                ('biography_text_field', models.TextField(blank=True, db_column='biography_text_field_db_column', db_index=True, db_tablespace='biography_text_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">text_field[0, 3000]</small><hr><br>', max_length=3000, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(3000)], verbose_name='Биография')),
                ('hobbies_text_field', models.TextField(blank=True, db_column='hobbies_text_field_db_column', db_index=True, db_tablespace='hobbies_text_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">text_field[0, 3000]</small><hr><br>', max_length=3000, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(3000)], verbose_name='Увлечения')),
                ('image_field', models.ImageField(blank=True, db_column='image_field_db_column', db_index=True, db_tablespace='image_field_db_tablespace', default='default/account/default_avatar.jpg', error_messages=False, help_text='<small class="text-muted">image_field[jpg, png]</small><hr><br>', max_length=200, null=True, upload_to='uploads/admin/account/avatar', validators=[django.core.validators.FileExtensionValidator(['jpg', 'png'])], verbose_name='Изображение')),
                ('user_foreign_key_field', models.ForeignKey(blank=True, db_column='user_foreign_key_field_db_column', db_tablespace='user_foreign_key_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">User: foreign_key_field</small><hr><br>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_foreign_key_field', to='auth.user', verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Пользователь расширение',
                'verbose_name_plural': 'Admin 1, Пользователи расширение',
                'db_table': 'user_extend_model_table',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='RationalModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number_char_field', models.CharField(blank=True, db_column='number_char_field_db_column', db_index=True, db_tablespace='number_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Номер')),
                ('subdivision_char_field', models.CharField(blank=True, db_column='subdivision_char_field_db_column', db_index=True, db_tablespace='subdivision_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Подразделение')),
                ('category_char_field', models.CharField(blank=True, db_column='category_char_field_db_column', db_index=True, db_tablespace='category_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Категория')),
                ('image_field', models.ImageField(blank=True, db_column='image_field_db_column', db_index=True, db_tablespace='image_field_db_tablespace', default='uploads/rational/default_rational.jpg', error_messages=False, help_text='<small class="text-muted">>image_field[jpg, png]</small><hr><br>', max_length=200, null=True, upload_to='uploads/rational/avatar/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'png'])], verbose_name='Изображение')),
                ('name_char_field', models.CharField(blank=True, db_column='name_char_field_db_column', db_index=True, db_tablespace='name_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Название')),
                ('place_char_field', models.CharField(blank=True, db_column='place_char_field_db_column', db_index=True, db_tablespace='place_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Место')),
                ('description_text_field', models.TextField(blank=True, db_column='description_text_field_db_column', db_index=True, db_tablespace='description_text_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">text_field[0, 3000]</small><hr><br>', max_length=3000, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(3000)], verbose_name='Описание')),
                ('additional_word_file_field', models.FileField(blank=True, db_column='additional_word_file_field_db_column', db_index=True, db_tablespace='additional_word_file_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">additional_word_file_field</small><hr><br>', max_length=200, null=True, upload_to='uploads/rational/files/', validators=[django.core.validators.FileExtensionValidator(['docx', 'doc'])], verbose_name='Word файл')),
                ('additional_pdf_file_field', models.FileField(blank=True, db_column='additional_pdf_file_field_db_column', db_index=True, db_tablespace='additional_pdf_file_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">additional_pdf_file_field</small><hr><br>', max_length=200, null=True, upload_to='uploads/rational/files/', validators=[django.core.validators.FileExtensionValidator(['pdf'])], verbose_name='Pdf файл')),
                ('additional_excel_file_field', models.FileField(blank=True, db_column='additional_excel_file_field_db_column', db_index=True, db_tablespace='additional_excel_file_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">additional_excel_file_field</small><hr><br>', max_length=200, null=True, upload_to='uploads/rational/files/', validators=[django.core.validators.FileExtensionValidator(['xlsx', 'xls'])], verbose_name='Excel файл')),
                ('author_1_perc_char_field', models.CharField(blank=True, db_column='author_1_perc_char_field_db_column', db_index=True, db_tablespace='author_1_perc_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Вклад автора 1')),
                ('author_2_perc_char_field', models.CharField(blank=True, db_column='author_2_perc_char_field_db_column', db_index=True, db_tablespace='author_2_perc_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Вклад автора 2')),
                ('author_3_perc_char_field', models.CharField(blank=True, db_column='author_3_perc_char_field_db_column', db_index=True, db_tablespace='author_3_perc_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Вклад автора 3')),
                ('author_4_perc_char_field', models.CharField(blank=True, db_column='author_4_perc_char_field_db_column', db_index=True, db_tablespace='author_4_perc_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Вклад автора 4')),
                ('author_5_perc_char_field', models.CharField(blank=True, db_column='author_5_perc_char_field_db_column', db_index=True, db_tablespace='author_5_perc_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Вклад автора 5')),
                ('status_moderate_char_field', models.CharField(blank=True, db_column='status_moderate_char_field_db_column', db_index=True, db_tablespace='status_moderate_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Статус')),
                ('comment_premoderate_char_field', models.CharField(blank=True, db_column='comment_premoderate_char_field_db_column', db_index=True, db_tablespace='comment_premoderate_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Комментарий премодерации')),
                ('comment_postmoderate_char_field', models.CharField(blank=True, db_column='comment_postmoderate_char_field_db_column', db_index=True, db_tablespace='comment_postmoderate_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Комментарий постмодерации')),
                ('created_datetime_field', models.DateTimeField(blank=True, db_column='created_datetime_field_db_column', db_index=True, db_tablespace='created_datetime_field_db_tablespace', default=django.utils.timezone.now, error_messages=False, help_text='<small class="text-muted">datetime_field</small><hr><br>', null=True, verbose_name='Дата и время создания')),
                ('register_datetime_field', models.DateTimeField(blank=True, db_column='register_datetime_field_db_column', db_index=True, db_tablespace='register_datetime_field_db_tablespace', default=django.utils.timezone.now, error_messages=False, help_text='<small class="text-muted">datetime_field</small><hr><br>', null=True, verbose_name='Дата и время регистрации')),
                ('author_1_foreign_key_field', models.ForeignKey(blank=True, db_column='author_1_foreign_key_field_db_column', db_tablespace='author_1_foreign_key_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">UserModel: foreign_key_field</small><hr><br>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rational_author_1_foreign_key_field', to='backend.usermodel', verbose_name='Автор 1')),
                ('author_2_foreign_key_field', models.ForeignKey(blank=True, db_column='author_2_foreign_key_field_db_column', db_tablespace='author_2_foreign_key_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">UserModel: foreign_key_field</small><hr><br>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rational_author_2_foreign_key_field', to='backend.usermodel', verbose_name='Автор 2')),
                ('author_3_foreign_key_field', models.ForeignKey(blank=True, db_column='author_3_foreign_key_field_db_column', db_tablespace='author_3_foreign_key_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">UserModel: foreign_key_field</small><hr><br>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rational_author_3_foreign_key_field', to='backend.usermodel', verbose_name='Автор 3')),
                ('author_4_foreign_key_field', models.ForeignKey(blank=True, db_column='author_4_foreign_key_field_db_column', db_tablespace='author_4_foreign_key_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">UserModel: foreign_key_field</small><hr><br>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rational_author_4_foreign_key_field', to='backend.usermodel', verbose_name='Автор 4')),
                ('author_5_foreign_key_field', models.ForeignKey(blank=True, db_column='author_5_foreign_key_field_db_column', db_tablespace='author_5_foreign_key_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">UserModel: foreign_key_field</small><hr><br>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rational_author_5_foreign_key_field', to='backend.usermodel', verbose_name='Автор 5')),
                ('author_foreign_key_field', models.ForeignKey(blank=True, db_column='author_foreign_key_field_db_column', db_tablespace='author_foreign_key_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">UserModel: foreign_key_field</small><hr><br>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rational_author_foreign_key_field', to='backend.usermodel', verbose_name='Автор')),
                ('postmoderate_foreign_key_field', models.ForeignKey(blank=True, db_column='postmoderate_foreign_key_field_db_column', db_tablespace='postmoderate_foreign_key_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">UserModel: foreign_key_field</small><hr><br>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rational_postmoderate_foreign_key_field', to='backend.usermodel', verbose_name='Постмодерация')),
                ('premoderate_foreign_key_field', models.ForeignKey(blank=True, db_column='premoderate_foreign_key_field_db_column', db_tablespace='premoderate_foreign_key_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">UserModel: foreign_key_field</small><hr><br>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rational_premoderate_foreign_key_field', to='backend.usermodel', verbose_name='Премодерация')),
            ],
            options={
                'verbose_name': 'Рационализаторское предложение',
                'verbose_name_plural': 'Рационализаторство 1, Рационализаторские предложения',
                'db_table': 'rational_model_table',
                'ordering': ('-created_datetime_field',),
            },
        ),
        migrations.CreateModel(
            name='NotificationModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_char_field', models.CharField(blank=True, db_column='name_char_field_db_column', db_index=True, db_tablespace='name_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Название')),
                ('place_char_field', models.CharField(blank=True, db_column='place_char_field_db_column', db_index=True, db_tablespace='place_char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='Место')),
                ('description_text_field', models.TextField(blank=True, db_column='description_text_field_db_column', db_index=True, db_tablespace='description_text_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">text_field[0, 3000]</small><hr><br>', max_length=3000, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(3000)], verbose_name='Описание')),
                ('visibility_boolean_field', models.BooleanField(blank=True, db_column='visibility_boolean_field_db_column', db_index=True, db_tablespace='visibility_boolean_field_db_tablespace', default=True, error_messages=False, help_text='<small class="text-muted">boolean_field</small><hr><br>', verbose_name='Видимость')),
                ('created_datetime_field', models.DateTimeField(blank=True, db_column='created_datetime_field_db_column', db_index=True, db_tablespace='created_datetime_field_db_tablespace', default=django.utils.timezone.now, error_messages=False, help_text='<small class="text-muted">datetime_field</small><hr><br>', null=True, verbose_name='Дата создания')),
                ('hide_datetime_field', models.DateTimeField(blank=True, db_column='hide_datetime_field_db_column', db_index=True, db_tablespace='hide_datetime_field_db_tablespace', default=django.utils.timezone.now, error_messages=False, help_text='<small class="text-muted">datetime_field</small><hr><br>', null=True, verbose_name='Дата скрытия')),
                ('author_foreign_key_field', models.ForeignKey(blank=True, db_column='author_foreign_key_field_db_column', db_tablespace='author_foreign_key_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">UserModel: foreign_key_field</small><hr><br>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notification_author_foreign_key_field', to='backend.usermodel', verbose_name='Автор')),
                ('model_foreign_key_field', models.ForeignKey(blank=True, db_column='model_foreign_key_field_db_column', db_tablespace='model_foreign_key_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">GroupModel: foreign_key_field</small><hr><br>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notification_model_foreign_key_field', to='backend.groupmodel', verbose_name='Группа')),
                ('target_foreign_key_field', models.ForeignKey(blank=True, db_column='target_foreign_key_field_db_column', db_tablespace='target_foreign_key_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">UserModel: foreign_key_field</small><hr><br>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notification_target_foreign_key_field', to='backend.usermodel', verbose_name='Цель')),
            ],
            options={
                'verbose_name': 'Уведомление',
                'verbose_name_plural': 'Admin 6, Уведомления',
                'db_table': 'notification_model_table',
                'ordering': ('-hide_datetime_field',),
            },
        ),
        migrations.CreateModel(
            name='IdeaRatingModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating_integer_field', models.IntegerField(blank=True, db_column='rating_integer_field_db_column', db_index=True, db_tablespace='rating_integer_field_db_tablespace', default=0, error_messages=False, help_text='<small class="text-muted">rating_integer_field</small><hr><br>', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Рейтинг')),
                ('created_datetime_field', models.DateTimeField(blank=True, db_column='created_datetime_field_db_column', db_index=True, db_tablespace='created_datetime_field_db_tablespace', default=django.utils.timezone.now, error_messages=False, help_text='<small class="text-muted">created_datetime_field</small><hr><br>', null=True, verbose_name='Дата и время создания')),
                ('author_foreign_key_field', models.ForeignKey(blank=True, db_column='author_foreign_key_field_db_column', db_tablespace='author_foreign_key_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">UserModel: foreign_key_field</small><hr><br>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rating_author_foreign_key_field', to='backend.usermodel', verbose_name='Автор')),
                ('idea_foreign_key_field', models.ForeignKey(blank=True, db_column='idea_foreign_key_field_db_column', db_tablespace='idea_foreign_key_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">IdeaModel: foreign_key_field</small><hr><br>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rating_idea_foreign_key_field', to='backend.ideamodel', verbose_name='Идея')),
            ],
            options={
                'verbose_name': 'Рейтинг',
                'verbose_name_plural': 'Банк идей 2, Рейтинги',
                'db_table': 'rating_idea_model_table',
                'ordering': ('-id',),
            },
        ),
        migrations.AddField(
            model_name='ideamodel',
            name='author_foreign_key_field',
            field=models.ForeignKey(blank=True, db_column='author_foreign_key_field_db_column', db_tablespace='author_foreign_key_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">UserModel: foreign_key_field</small><hr><br>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='idea_author_foreign_key_field', to='backend.usermodel', verbose_name='Автор'),
        ),
        migrations.AddField(
            model_name='ideamodel',
            name='moderate_author_foreign_key_field',
            field=models.ForeignKey(blank=True, db_column='moderate_author_foreign_key_field_db_column', db_tablespace='moderate_author_foreign_key_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">UserModel: foreign_key_field</small><hr><br>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='idea_moderate_author_foreign_key_field', to='backend.usermodel', verbose_name='Модерация'),
        ),
        migrations.CreateModel(
            name='IdeaCommentModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment_text_field', models.TextField(blank=True, db_column='comment_text_field_db_column', db_index=True, db_tablespace='comment_text_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">text_field[0, 3000]</small><hr><br>', max_length=3000, null=True, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(3000)], verbose_name='Комментарий')),
                ('created_datetime_field', models.DateTimeField(blank=True, db_column='created_datetime_field_db_column', db_index=True, db_tablespace='created_datetime_field_db_tablespace', default=django.utils.timezone.now, error_messages=False, help_text='<small class="text-muted">created_datetime_field</small><hr><br>', null=True, verbose_name='Дата и время создания')),
                ('author_foreign_key_field', models.ForeignKey(blank=True, db_column='author_foreign_key_field_db_column', db_tablespace='author_foreign_key_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">UserModel: foreign_key_field</small><hr><br>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comment_author_foreign_key_field', to='backend.usermodel', verbose_name='Автор')),
                ('idea_foreign_key_field', models.ForeignKey(blank=True, db_column='idea_foreign_key_field_db_column', db_tablespace='idea_foreign_key_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">IdeaModel: foreign_key_field</small><hr><br>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comment_idea_foreign_key_field', to='backend.ideamodel', verbose_name='Идея')),
            ],
            options={
                'verbose_name': 'Комментарий',
                'verbose_name_plural': 'Банк идей 3, Комментарии',
                'db_table': 'comment_idea_model_table',
                'ordering': ('-created_datetime_field',),
            },
        ),
        migrations.AddField(
            model_name='groupmodel',
            name='user_many_to_many_field',
            field=models.ManyToManyField(blank=True, db_column='user_many_to_many_field_db_column', db_index=True, db_tablespace='user_many_to_many_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted underline">UserModel: many_to_many_field</small><hr><br>', related_name='group_user_many_to_many_field', to='backend.UserModel', verbose_name='Пользователи'),
        ),
        migrations.CreateModel(
            name='ExamplesModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('positive_integer_field', models.PositiveIntegerField(auto_created=True, blank=True, db_column='positive_integer_field_db_column', db_index=True, db_tablespace='positive_integer_field_tablespace', default=0, help_text='<small class="text-muted">Положительное целочисленное значение от 0 до 2147483647, example: "0"</small><hr><br>', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2147483647)], verbose_name='positive_integer_field')),
                ('big_integer_field', models.BigIntegerField(auto_created=True, blank=True, db_column='big_integer_field_db_column', db_index=True, db_tablespace='big_integer_field_tablespace', default=0, help_text='<small class="text-muted">Большое целочисленное значение от -9223372036854775808 до 9223372036854775807, example: "0"</small><hr><br>', null=True, validators=[django.core.validators.MinValueValidator(-9223372036854775808), django.core.validators.MaxValueValidator(9223372036854775807)], verbose_name='big integer')),
                ('binary_field', models.BinaryField(blank=True, db_column='binary_field_db_column', db_index=True, db_tablespace='binary_field_db_tablespace', default=None, editable=True, error_messages=False, help_text='<small class="text-muted">Бинарные данные (сохранять без преписки b"), example: "OTcwODAxMzUxMTc5"</small><hr><br>', max_length=300, null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='binary_field')),
                ('boolean_field', models.BooleanField(blank=True, db_column='boolean_field_db_column', db_index=True, db_tablespace='boolean_field_db_tablespace', default=False, error_messages=False, help_text='<small class="text-muted">boolean_field</small><hr><br>', unique_for_date=False, unique_for_month=False, unique_for_year=False, verbose_name='boolean_field')),
                ('null_boolean_field', models.BooleanField(blank=True, db_column='null_boolean_field_db_column', db_index=True, db_tablespace='null_boolean_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">boolean_field</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, verbose_name='null_boolean_field')),
                ('char_field', models.CharField(blank=True, db_column='char_field_db_column', db_index=True, db_tablespace='char_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">char_field[0, 300]</small><hr><br>', max_length=300, null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='char_field')),
                ('text_field', models.TextField(blank=True, db_column='text_field_db_column', db_index=True, db_tablespace='text_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">text_field[0, 3000]</small><hr><br>', max_length=3000, null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(3000)], verbose_name='text_field')),
                ('slug_field', models.SlugField(blank=True, db_column='slug_field_db_column', db_tablespace='slug_field_db_tablespace', default='', error_messages=False, help_text='<small class="text-muted">slug_field[0, 300]</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='slug_field')),
                ('email_field', models.EmailField(blank=True, db_column='email_field_db_column', db_index=True, db_tablespace='email_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">email_field[0, 300]</small><hr><br>', max_length=254, null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='email_field')),
                ('url_field', models.URLField(blank=True, db_column='url_field_db_column', db_index=True, db_tablespace='url_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">Строка содержащая url-адрес, example: "http://89.218.132.130:8000/"</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='url_field')),
                ('genericipaddress_field', models.GenericIPAddressField(blank=True, db_column='genericipaddress_field_db_column', db_index=True, db_tablespace='genericipaddress_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">Строка содержащая ip-адрес, example: "127.0.0.1"</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, validators=[django.core.validators.MinLengthValidator(0), django.core.validators.MaxLengthValidator(300)], verbose_name='genericipaddress_field')),
                ('integer_field', models.IntegerField(blank=True, db_column='integer_field_db_column', db_index=True, db_tablespace='integer_field_db_tablespace', default=0, error_messages=False, help_text='<small class="text-muted">Целочисленное значение от -2147483648 до 2147483647, example: "0"</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, validators=[django.core.validators.MinValueValidator(-2147483648), django.core.validators.MaxValueValidator(2147483647)], verbose_name='integer_field')),
                ('float_field', models.FloatField(blank=True, db_column='float_field_db_column', db_index=True, db_tablespace='float_field_db_tablespace', default=0.0, error_messages=False, help_text='<small class="text-muted">Число с плавающей запятой, example: "0.0"</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, validators=[django.core.validators.MinValueValidator(-1000), django.core.validators.MaxValueValidator(1000)], verbose_name='float_field')),
                ('decimal_field', models.DecimalField(blank=True, db_column='decimal_field_db_column', db_index=True, db_tablespace='decimal_field_db_tablespace', decimal_places=5, default=0.0, error_messages=False, help_text='<small class="text-muted">Нецелочисленное значение, example: "0.000"</small><hr><br>', max_digits=10, null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, validators=[django.core.validators.MinValueValidator(-1000), django.core.validators.MaxValueValidator(1000)], verbose_name='decimal_field')),
                ('datetime_field', models.DateTimeField(blank=True, db_column='datetime_field_db_column', db_index=True, db_tablespace='datetime_field_db_tablespace', default=django.utils.timezone.now, error_messages=False, help_text='<small class="text-muted">datetime_field</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, verbose_name='datetime_field')),
                ('date_field', models.DateField(blank=True, db_column='date_field_db_column', db_index=True, db_tablespace='date_field_db_tablespace', default=django.utils.timezone.now, error_messages=False, help_text='<small class="text-muted">date_field</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, verbose_name='date_field')),
                ('time_field', models.TimeField(blank=True, db_column='time_field_db_column', db_index=True, db_tablespace='time_field_db_tablespace', default=django.utils.timezone.now, error_messages=False, help_text='<small class="text-muted">time_field</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, verbose_name='time_field')),
                ('duration_field', models.DurationField(blank=True, db_column='duration_field_db_column', db_index=True, db_tablespace='duration_field_db_tablespace', default=datetime.timedelta(seconds=1200), error_messages=False, help_text='<small class="text-muted">duration_field</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, verbose_name='duration_field')),
                ('file_field', models.FileField(blank=True, db_column='file_field_db_column', db_index=True, db_tablespace='file_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">Файл, с расширением указанным в валидаторе, example: "example.xlsx"</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, upload_to='uploads/example/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(['xlsx', 'xls'])], verbose_name='file_field')),
                ('image_field', models.ImageField(blank=True, db_column='image_field_db_column', db_index=True, db_tablespace='image_field_db_tablespace', default='uploads/example/example.jpg', error_messages=False, help_text='<small class="text-muted">image_field[jpg, png]</small><hr><br>', null=True, unique_for_date=False, unique_for_month=False, unique_for_year=False, upload_to='uploads/example/example.jpg', validators=[django.core.validators.FileExtensionValidator(['jpg', 'png'])], verbose_name='file_field')),
                ('foreign_key_field', models.ForeignKey(blank=True, db_column='foreign_key_field_db_column', db_tablespace='foreign_key_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">UserModel: foreign_key_field</small><hr><br>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='examples_foreign_key_field', to='auth.user', unique_for_date=False, unique_for_month=False, unique_for_year=False, verbose_name='foreign_key_field')),
                ('many_to_many_field', models.ManyToManyField(blank=True, db_column='many_to_many_field_db_column', db_index=True, db_tablespace='many_to_many_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">User: many_to_many_field</small><hr><br>', related_name='examples_many_to_many_field', to=settings.AUTH_USER_MODEL, unique_for_date=False, unique_for_month=False, unique_for_year=False, verbose_name='many_to_many_field')),
                ('one_to_one_field', models.OneToOneField(blank=True, db_column='one_to_one_field_db_column', db_tablespace='one_to_one_field_db_tablespace', default=None, error_messages=False, help_text='<small class="text-muted">Связь, с каким-либо объектом, example: "to=User.objects.get(username="Bogdan")"</small><hr><br>', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='examples_one_to_one_field', to='auth.user', unique_for_date=False, unique_for_month=False, unique_for_year=False, verbose_name='one_to_one_field')),
            ],
            options={
                'verbose_name': 'Шаблон',
                'verbose_name_plural': 'Admin 0, Шаблоны',
                'db_table': 'example_admin_model_table',
                'ordering': ('-id',),
            },
        ),
    ]
